#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#


library(DT)
library(shiny)
library(ggplot2)

dta <- read.csv("UCI_Credit_Card.csv")
dta$SEX<- as.factor(dta$SEX)
levels(dta$SEX)<-c("Male", "Female")

dta$EDUCATION<-as.factor(dta$EDUCATION)
levels(dta$EDUCATION)<-c("Unknown", "Graduate School", "University", "High school", "Others", "Unknown", "Unknown")

dta$MARRIAGE<- as.factor(dta$MARRIAGE)
levels(dta$MARRIAGE)<-c("unknown",'married', "single", "others")




choice.type1 <-
  c('SEX','EDUCATION','MARRIAGE','AGE')
choice.type2 <-
  c('SEX','EDUCATION','MARRIAGE')
choice.value <-
  c("LIMIT_BAL")
  

# UI
ui <- navbarPage(
  "Shiny Example",
  tabPanel(
    "Introduction",
    tags$h1("This is an example for making a shiny app."),
    tags$p("explore the clients' data of the credit card")
    #HTML("<img height=600 src=\"https://78.media.tumblr.com/aa70ed84a7cd2e7b83c36118dfb2c0e5/tumblr_p8xzq1U8ik1qhy6c9o1_500.gif\"/>")
  ),
  tabPanel(
    "Raw Data",
    tags$h1("Let's take a look at the dataset."),
    br(),
    fluidRow(column(
      8,
      tabPanel("Table",
               DT::dataTableOutput("data.raw"))
    ))
  ),
  
  tabPanel(
    "Single Variable",
    tags$h1("Summrizing time!"),
    br(),
    sidebarLayout(
      sidebarPanel(
        selectInput('SV.input', 'type', c(choice.type1, choice.value), selectize = TRUE)
      ),
      mainPanel(plotOutput("SV.plot"))
    ),
    
    tags$h1("Summary"),
    verbatimTextOutput("summary")
    
  ),
  
  ###
  tabPanel(
    "Single Variable",
    tags$h1("Summrizing time!"),
    br(),
    sidebarLayout(
      sidebarPanel(
        selectInput('SV.input', 'type', c(choice.type1, choice.value), selectize = TRUE)
      ),
      mainPanel(plotOutput("SV.plot"))
    ),
    
    tags$h1("Summary"),
    verbatimTextOutput("summary")
    
  ),
  
  ##
  tabPanel(
    "aaa",
    'bbb'
    
  ),
  
  
  ###


  
  

###
  navbarMenu(title='default',
          tabPanel(title = 'The reason of default',plotOutput('unif'),
                   actionButton('reunif','Resample'))
            
            ))


###

######################################################

# server
server <- function(input, output, session) {
  output$SV.plot <- renderPlot({
    if( is.element(input$SV.input, choice.type1) ){
      ggplot(data = dta, aes_string(x = input$SV.input)) +
        geom_bar() +
        labs(y = "count", x = input$SV.input)
    }
    else{
      ggplot(data = dta, aes_string(x = input$SV.input)) +
        geom_histogram() +
        labs(y = "count", x = input$SV.input)
    }
  })
  
  
  ###
  output$SV.plot <- renderPlot({
    if( is.element(input$SV.input, choice.type1) ){
      ggplot(data = dta, aes_string(x = input$SV.input)) +
        geom_bar() +
        labs(y = "count", x = input$SV.input)
    }
    else{
      ggplot(data = dta, aes_string(x = input$SV.input)) +
        geom_histogram() +
        labs(y = "count", x = input$SV.input)
    }
  })
  ###
  
  
  output$PA.plot <- renderPlot({
    ggplot(data = dta, aes_string(x = input$PA.type, y = input$PA.value)) +
      geom_boxplot() + coord_flip() +
      labs(y = input$PA.value, x = input$PA.type)
    
  })
  
  output$summary <- renderPrint({
    summary(dta)
  })
  
  output$t.test.anova <- renderPrint({
    type = unlist(dta[input$PA.type])
    value = unlist(dta[input$PA.value])
    if (length(levels(type)) == 2){
      t.test( value ~ type )
    } else {
      anova( lm(value ~ type) )
    }
  })
  
  output$data.raw <- DT::renderDataTable({
    DT::datatable(dta)
  })
  
  output$data.summary <- DT::renderDataTable({
    DT::datatable(summary(dta))
  })
}

# Run the application 
shinyApp(ui = ui, server = server)

